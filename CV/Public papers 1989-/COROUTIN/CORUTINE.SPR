TO PROGRAMLISTNINGER I SLUTNINGEN.
JEG VED IKKE OM TASK ER ET "ET" ELLER "EN" ORD!!!
SIGER MAN "HVER TASK" ELLER "HVERT TASK"??
JEG HAR VALGT LIDT AF HVERT!!!!!

Multitasking i Pascal

K‘rt barn har mange navne, is‘r n†r det drejer sig om begrebet multitasking. Man kan blot t‘nke p† ord som: multitask, realtime, sandtid, realtid, timeslice, monitor, operativ system, styre system og co-rutiner. 

Multitasking giver kort fortalt et program mulighed for at starte flere tasks, der p† skift benytter CPU'en, s† det for hver task ser ud som om, det er alene i verden, blot p† en langsommere CPU. 

Man kan lave flere task i et program for at opn† bestemte fordele, men man kan ogs† opfatte det at benytte task i programmet som en arbejdsmetode. 

Multitask systemer er typisk bygget efter to principper, med eller uden tvungen tidsdeling. 

Et operativ system som OS/2 benytter tvungen tidsdeling, derfor bliver et k›rende program ustandselig bliver afbrudt af system klokken, der skifter CPU'ens arbejdskraft rundt mellem alle task, der ›nsker noget beregnet. 
Et operativ system som Macintosh'ens MultiFinder er ikke tidsdelt. Her sker kun skift mellem de forskellige tasks n†r taskene selv ›nsker det. Dette sker, hver gang et task venter p† nye h‘ndelser, som fx fra tastetryk, musebev‘gelse osv. Velopdragne programmer vil derfor kunne k›re lige s† godt under MultiFinder som under OS/2. Men et program, der bruger CPU'en i 5 sekunder, vil i et ikke tidsdelt system holde de andre task v‘k fra deres vigtigste hj‘lpemiddel, CPU'en, i tilsvarende 5 sekunder.

Et tidsdelt system underst›tter (n‘sten) altid prioritering af de enkelte task. Et cpu-kr‘vende task kan fx gives lav prioritet, mens I/O kr‘vende task kan gives h›jere prioritet. Hver gang et task bruger I/O operationer, fx disk og tastatur, bliver det n›dt til at frigive cpu'en, indtil den ›nskede operation er overst†et. De lavere prioriterede task vil derved f† noget tid. 

CO-Rutiner
==========

Det unit jeg har lavet denne gang giver dig mulighed for at bruge den simpleste form for multitasking, co-rutiner. Princippet heri er ene og alene den frivillige afgivelse af CPU'en. 

Task i et co-rutine system kan godt v‘re prioriterede, idet man kan angive, hvor sj‘ldent et task skal kaldes, selvom det egentlig burde have lidt tid. Det kan nemt indf›jes i koden her, hvis det ›nskes. 

Der er alts† ingen prioritering i CO_Rutine modulet. For at spare p† CPU tiden, har jeg derimod lavet en funktion, der kan fort‘lle, hvorn†r det er p† tide igen at v†gne op. Denne rutine kan derfor bruges til at forsinke et task et vist tidsrum. Dette bruges fx i Task1 i CO_Test programmet, til at f† en t‘ller til at t‘lle et trin frem hvert sekund, alts† et ur.

(Beskrivelse af) CO_Rutine modulet
===================================

Co-rutine modulet er beregnet for Turbo Pascal version 4 og senere. Det har to procedurer, der styrer det hele: InstallTask og Idle. 

InstallTask kaldes af hovedprogrammet for hver task med adressen p† tasket og adressen p† et stakomr†de. Alle stakomr†der skal v‘re indenfor det oprindelige stakomr†de, og m† ikke v‘re sammenfaldende. 

Idle er engelsk for fri, arbejdsl›s eller lignende. Idle rutinen skal kaldes rimeligt ofte. Idle kaldet giver CPU'en videre til det n‘ste task i systemet. N†r alle har haft del i CPU'en, returnerer Idle tilsyneladende igen. For hvert task ser et kald til Idle derfor blot ud som et kald til en pause rutine, der venter i kortere eller l‘ngere tid. 

CO_Test programmet har fire task plus hoved programmet. Hoved programmet laver intet, hvilket er lidt spild. Alle task gives 4000 bytes til deres private stak plads. Task1 har fra 0 til 4000, Task2 fra 4000 til 8000. Hoved programmet selv har resten af stakken fra 16000 til 64000 (som angivet i $M direktivet. Stak angivelsen skal mindst svare til, hvad der reelt bruges af stak. 4000 bytes giver ikke mulighed for de helt store data omr†der lokalt i taskene. Men data kan sagtens erkl‘res globalt, men det er jo ikke videre struktureret, s† undg† dette hvor det er muligt. Den valgte v‘rdi p† 4000 kan istedet sagtens v‘re 12000, da fem task gange 12000 giver 60000 bytes totalt, alts† mindre de angivne 65000.
Vil du l‘se mere om stakken og dens mysterier, s† l‘s min artikel i PC World, november 1989. 

Det er vigtigt at kalde Idle j‘vnligt. Task1 og Task2 kalder Idle indtil en vis tid er g†et, Task4 kalder Idle indtil der trykkes p† tastaturet, medens Task3 KUN kalder Idle n†r det i maskinens indbyggede ur skifter, hvilket sker 18.2 gange hvert sekund. Task3 bruger derfor al den CPU kraft, som alle de andre task ikke kan bruge. 

Den nemmeste m†de at se, hvordan programmet fungerer, er at se det k›re. Det forventes at brugeren (dig) indtaster en linje afsluttet med retur. Taskene 1, 2 og 3 skriver en linje i de tilh›rende linjer 1, 2 og 3. 

Under fors›gene kan det v‘re praktisk at studere hvordan Tasks, SPtr, TaskCount og TaskIndex ‘ndrer sig. Angiv derfor disse med Control-F7 funktionen i Turbo Pascal.

F›rste fors›g: Lad programmet k›re og se hvordan det opf›rer sig. 
N‘ste fors›g: Pr›v at unders›g programmet ved brug af F7 og F8 tasterne. G†r du ind i en Idle rutine med F7 kommer du ikke tilbage til den samme task igen, f›rend alle taskene har v‘ret bes›gt. Bruger du F8 ved kaldet af Idle, opdager du ikke andet end at sk‘rmen har ‘ndret sig imens. 

Det er selvf›lgeligt lovligt at starte det samme task flere gange, blot hver version f†r sin egen stak omr†de. Her er det naturligvis vigtigt, at man passer meget p† med globale variabler. Brugen af  lokale variabler fungerer her helt perfekt, da de jo netop anbringes p† den lokale stak. Pr›v for eksempel at starte Task2 to gange ekstra. Der skal blot fjernes et par kommentar klammer fra programmet.

########KASSE KASSE KASSE KASSE KASSE KASSE KASSE KASSE KASSE 
########B›r vel s‘ttes i en 2 eller 3 spaltes bredde!!!
########Program linjerne b›r ikke ombrydes
########======================================================

Arbejdsmetode
==overskrift==

At dele et program op i flere task kan g›re det mere overskueligt at skrive et program. 

Mange programmer har typisk en uendelig l›kke, hvori der testes for forskellige ting. Et terminal program ser typisk s†ledes ud:

  repeat
    if KeyPressed then 
      auxOut(ReadKey);
    if auxInReady then 
      ch:=auxIn;
      case LastState of
      inESC: if ch='[' then 
               SetNewState
	        else ?????;
      else
        if ch=ESC then 
          LastState:=inESC
        else write(ch);
      end;
    if ScreenSaverOn and TwoMinutesPast then 
      TurnOffScreen;
  until false;

Hvert af de tre sp›rgsm†l kan sagtens splittes ud i tre separate tasks, idet man derved lettere kan behandle tilstands skift. T‘nk blot p† hvordan en terminal skal kunne fortolke en ANSI sekvens som ESC '[1;2H', der betyder gotoxy(1,2). Da tegnene ikke kommer p† samme tid, skal programmet p† en eller anden m†de huske p† alle tegnene indtil tegnet 'H' m›des. Dette g›res normalt ved, at man efter ESC husker p†, at dette er set, hvorefter man, n†r '[' ses, endnu engang skifter tilstand, osv. 

Ved task programmering kan dette omprogrammeres til en masse case udtryk inden i hinanden:

procedure TaskAUXIN;
begin
  repeat
    ch:=ReadNextChar;
    case ch of
    ESC: 
      ch:=ReadNextChar;
      case ch of
      '[' {Efter ESC '['}
        X:=char(ReadNextChar);
        dummy:=ReadNextChar;
        Y:=char(ReadNextChar);
        case ReadNextChar of
        'H': gotoxy(x,y);
        end;
      else ???
      end;
    else
      write(ch);
    end;
  until Stop;
end;

Proceduren ReadNextChar antages at kalder Idle indtil der ankommer et nyt tegn. 

Blot det, at man kan undv‘re at holde rede p† de forskellige tilstande, er en god grund til at benytte task teknikken. 

Jeg har selv brugt dette princip til at h†ndtere 5 serielle linjer, der konstant skal bruges, samtidigt med at brugeren skal kunne give nye kommandoer til systemet. De 5 linjer behandles af den samme task procedure (samme kode), blot med hver deres portnummer og stakomr†de, mens et 6 task h†ndterer bruger interfacet.

=========================================================
PROGRAM LISTING 1
=========================================================

Demonstrations programmet CO_Test.

Program CO_Test;
{$M 64000,0,0} {$F+,R-}

{ Co-rutiner i Turbo Pascal }
{ Af Christen Fihl 1990     }

{ Kik p† SPtr og Tasks medens du debugger. Brug F7 hertil }
{ Kik m†ske ogs† p† TaskCount og TaskIndex }

Uses Crt,CoRutine;

Const Stop: Boolean=False;             {Stopper Task3 n†r den s‘ttes til true}

procedure Idle;      {En procedure, der g›r det nemmere at debugge programmet}
begin                                    {Spilder lidt tid, men hvad g›r det!}
  CoRutine.Idle
end;

procedure Task1;                      {1 sekund task. Kan fx bruges som et ur}
Var   m,n: Integer;
      Ticks: Longint;
begin
  for n:=1 to 10 do begin                                  {K›r i 10 sekunder}
    repeat Idle until HasUsedTicks(Ticks,18);
    gotoxy(1,TaskIndex+2); write(' 1/sec: ',n:6);
  end;
  write(' Ok');
end;

procedure Task2;                                    {18 gange per sekund task}
Var   m,n: Integer;
      Ticks: LongInt;
begin
  for n:=1 to 100 do begin  {K›r i 100 ticks = 100/18 sekunder = 5.5 sekunder}
    repeat Idle until HasUsedTicks(Ticks,1);
    gotoxy(1,TaskIndex+2); write('18/sec: ',n:6);
  end;
  write(' Ok');
end;

procedure Task3;         {K›r hurtigst muligt, men giv de andre tid alligevel}
Var   n: LongInt;                            {Stopper ogs† p† "Stop" signalet}
Var   LastTimer: Word;
Var   TimerLow: Word absolute $0040:$006C;           {BIOS'ens timer variabel}
begin
  for n:=1 to MaxLongInt do begin
    if (LastTimer<>TimerLow) or (n=999999) then begin
      Idle; LastTimer:=TimerLow;
      gotoxy(1,TaskIndex+2); write('hurtig: ',n:6);
    end;
    if Stop or (N=999999) then begin
      if Stop then write(' Stoppet') else write(' Ok');
      EXIT;
    end;
  end;
end;

procedure Task4;                  {L‘s fra tastaturet indtil der tastes retur}
Var   x:  Integer;
      Ch: Char;
Const Y=  15;
begin
  gotoxy(1,y); write('Tast en linje her: ');
  repeat
    x:=WhereX;
    while not KeyPressed do begin Idle; gotoxy(x,y) end; Ch:=ReadKey;
    if Ch=#13 then x:=999 else write(Ch);
  until x>=70;
  Stop:=True;                                                {Stop ogs† Task3}
  write(' ... Tak');
  repeat Idle; gotoxy(1,y+2) until TaskCount=1; {Hold cursoren p† samme plads}
end;

begin
  ClrScr;
  InstallTask(@Task1,1*4000);
  InstallTask(@Task2,2*4000);
  InstallTask(@Task3,3*4000);
  InstallTask(@Task4,4*4000);
{ Test. Se teksten. S‘t blot en slut kommentar her ===> 
  InstallTask(@Task2,5*4000);
  Idle; Idle; Idle; Idle; Idle; (* Forskyder t‘llerne *)
  InstallTask(@Task2,6*4000);
{}
  repeat
    Idle;
  until (TaskCount=0);
end.

=========================================================
PROGRAM LISTING 2
=========================================================

CO Rutine modulet.

Unit CoRutine;
{$F+,R-,S-,D-}   {Fjern eventuelt D-, hvis du vil se hvordan rutinerne virker}

interface

{ Idle kaldes s† ofte som muligt. Idle deler CPU'en for brug af alle task}
procedure Idle;

{ Installer en Task (en procedure i $F+ tilstand)}
{ Hver task skal have egen stak plads. StackTop er toppen af omr†det givet}
procedure InstallTask(Adresse: Pointer; StackTop: Word);

{ Utility rutine}
{ returner true hver gang der er g†et "Ticks" ticks (1/18 sekund)}
{ if HasUsedTicks(Ticks,4*18) then DoIt;  Kalder derfor Doit hvert 4 sekund}
function  HasUsedTicks(var LocalVar: longint; Ticks: integer): boolean;

Const TaskMax=10;
Const TaskCount: Integer=0;
Const TaskIndex: Integer=0;
Const Tasks:     array[0..TaskMax] of Word=(0,0,0,0,0,0,0,0,0,0,0); {SP tabel}

implementation

Var Temp: Word;                  {SKAL v‘re global. Bruges i INLINE udtrykket}

procedure Idle;
{INGEN LOKALE VARIABLER HER!!}
begin
  if TaskIndex<>-1 then                        {Speciel for terminerings brug}
    Tasks[TaskIndex]:=SPtr;           {Altid bortset fra ved kald fra LastOne}
  repeat                      {Find n‘ste aktive Task i stak pointer tabellen}
    if TaskIndex=TaskMax then TaskIndex:=0 else inc(TaskIndex);   {0..TaskMax}
    Temp:=Tasks[TaskIndex];
  until Temp<>0;
  inline ($8B/$2E/Temp); { MOV  BP,Temp }
  inline ($8B/$26/Temp); { MOV  SP,Temp }
end;                     { (MOV SP,BP,) POP BP, RETF}

procedure LastOne;  {Hertil hoppes n†r en bruger-rutine returnerer (End/Exit)}
begin
  Tasks[TaskIndex]:=0;                       {Fjern tabel indholdet for "mig"}
  TaskIndex:=-1; dec(TaskCount);                    {"-1" er et flag til Idle}
  Idle;                   {Idle returnerer aldrig, da tabellen for "mig" er 0}
end;

procedure InstallTask(Adresse: Pointer; StackTop: Word);
Type InitSP= record
               BP: word;
               IPCS, Final: Pointer
             end;
Var   Pptr:  ^InitSP;
      N:     Integer;
begin
  if StackTop>(SPtr-1000) then begin
    writeln('Ikke mere stak plads!');  HALT(99);
  end;
  inc(TaskCount); dec(StackTop,SizeOf(InitSP)); {Plads til vores initial data}
  Pptr:=Ptr(SSeg,StackTop);
  Pptr^.BP:=0;                           {Lav en passende struktur p† stakken}
  Pptr^.IPCS:=Adresse;                              {Adressen p† vores rutine}
  Pptr^.Final:=@LastOne;  {En rutine der kaldes EFTER vores procedure er slut}
  n:=0; repeat inc(n) until Tasks[n]=0;            {Find ledig hul i tabellen}
  Tasks[n]:=StackTop;                                        {Inds‘t i hullet}
end;

function  HasUsedTicks(var LocalVar: longint; Ticks: integer): boolean;
Var   TimerLow: word absolute $0040:$006C;        { BIOS'ens timer variabel }
      L: LongInt;
begin
  L:=LongInt(TimerLow)+LongInt(Ticks);
  if LocalVar>L then LocalVar:=TimerLow;
  if LocalVar>=timerLow then HasUsedTicks:=false else begin
    LocalVar:=L;
    HasUsedTicks:=true;
  end;
end;

end.

=========================================================
